// File generated from our OpenAPI spec by Stainless.

package ai.nextbillion.models.optimization.v2

import ai.nextbillion.core.JsonValue
import ai.nextbillion.core.http.QueryParams
import ai.nextbillion.models.optimization.driverassignment.Location
import ai.nextbillion.models.optimization.driverassignment.Vehicle
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class V2SubmitParamsTest {

    @Test
    fun create() {
        V2SubmitParams.builder()
            .key("key=API_KEY")
            .locations(
                V2SubmitParams.Locations.builder()
                    .addLocation("string")
                    .id(0L)
                    .addApproach(V2SubmitParams.Locations.Approach.UNRESTRICTED)
                    .build()
            )
            .addVehicle(
                Vehicle.builder()
                    .id("id")
                    .location(Location.builder().lat(-90.0).lon(-180.0).build())
                    .attributes(
                        JsonValue.from(
                            "\"attributes\":{\n    \"driver_rating\": \"4.0\",\n    \"trip_types\": \"premium\"\n  }"
                        )
                    )
                    .priority(0L)
                    .addRemainingWaypoint(Location.builder().lat(-90.0).lon(-180.0).build())
                    .build()
            )
            .addCostMatrix(listOf(0L))
            .addDepot(
                V2SubmitParams.Depot.builder()
                    .id("\"id\":\"depot 1\"")
                    .locationIndex(0L)
                    .description("“description”:”Los_Angeles_depot”")
                    .service(0L)
                    .addTimeWindow(listOf(0L))
                    .build()
            )
            .description("\"description\": \"Sample Optimization\"")
            .addDistanceMatrix(listOf(0L))
            .addDurationMatrix(listOf(0L))
            .existingSolutionId("existing_solution_id")
            .addJob(
                Job.builder()
                    .id("\"id\":\"Job 1\"")
                    .locationIndex(0L)
                    .addDelivery(0L)
                    .addDepotId("string")
                    .description("description")
                    .followLifoOrder(true)
                    .addIncompatibleLoadType("string")
                    .jointOrder(0L)
                    .addLoadType("string")
                    .maxVisitLateness(0L)
                    .metadata(
                        JsonValue.from("{\n  \"contact\": \"212-456-7890\",\n  \"metaId\": 1234\n}")
                    )
                    .outsourcingCost(0L)
                    .addPickup(0L)
                    .priority(0L)
                    .revenue(0L)
                    .sequenceOrder(0L)
                    .service(0L)
                    .setup(0L)
                    .addSkill(1L)
                    .addTimeWindow(listOf(0L))
                    .volume(
                        Job.Volume.builder()
                            .alignment(Job.Volume.Alignment.STRICT)
                            .depth(0.0)
                            .height(0.0)
                            .width(0.0)
                            .build()
                    )
                    .addZone(0L)
                    .build()
            )
            .options(
                V2SubmitParams.Options.builder()
                    .constraint(
                        V2SubmitParams.Options.Constraint.builder()
                            .maxActivityWaitingTime(0L)
                            .maxVehicleOvertime(0L)
                            .maxVisitLateness(0L)
                            .build()
                    )
                    .grouping(
                        V2SubmitParams.Options.Grouping.builder()
                            .orderGrouping(
                                V2SubmitParams.Options.Grouping.OrderGrouping.builder()
                                    .groupingDiameter(0.0)
                                    .build()
                            )
                            .proximityFactor(0.0)
                            .routeGrouping(
                                V2SubmitParams.Options.Grouping.RouteGrouping.builder()
                                    .penaltyFactor(0.0)
                                    .zoneDiameter(0.0)
                                    .zoneSource(
                                        V2SubmitParams.Options.Grouping.RouteGrouping.ZoneSource
                                            .SYSTEM_GENERATED
                                    )
                                    .build()
                            )
                            .build()
                    )
                    .objective(
                        V2SubmitParams.Options.Objective.builder()
                            .allowEarlyArrival(true)
                            .custom(
                                V2SubmitParams.Options.Objective.Custom.builder()
                                    .type(V2SubmitParams.Options.Objective.Custom.Type.MIN)
                                    .value(
                                        V2SubmitParams.Options.Objective.Custom.ObjectiveValue
                                            .VEHICLES
                                    )
                                    .build()
                            )
                            .minimiseNumDepots(true)
                            .solverMode(V2SubmitParams.Options.Objective.SolverMode.FLEXIBLE)
                            .solvingTimeLimit(0L)
                            .travelCost(V2SubmitParams.Options.Objective.TravelCost.DURATION)
                            .build()
                    )
                    .routing(
                        V2SubmitParams.Options.Routing.builder()
                            .addAllow(V2SubmitParams.Options.Routing.Allow.TAXI)
                            .addAvoid(V2SubmitParams.Options.Routing.Avoid.TOLL)
                            .context(V2SubmitParams.Options.Routing.Context.AVGSPEED)
                            .crossBorder(true)
                            .disableCache(true)
                            .addHazmatType(V2SubmitParams.Options.Routing.HazmatType.GENERAL)
                            .mode(V2SubmitParams.Options.Routing.Mode.CAR)
                            .profiles(
                                JsonValue.from(
                                    "\"profiles\":{\n    \"mini-van\":{\n        \"mode\": \"car\",\n        \"avoid\":[\"highway, toll\"]\n        },\n    \"trailer\":{\n        \"mode\": \"truck\",\n        \"truck_weight\":12000,\n        \"truck_size\":\"200, 210, 600\",\n        \"hazmat_type\": [\"general\", \"harmful_to_water\"]\n        }\n    }\n"
                                )
                            )
                            .trafficTimestamp(0L)
                            .truckAxleLoad(0.0)
                            .truckSize("\"truck_size\":\"200,210,600\"")
                            .truckWeight(0L)
                            .build()
                    )
                    .build()
            )
            .addRelation(
                V2SubmitParams.Relation.builder()
                    .addStep(
                        V2SubmitParams.Relation.Step.builder()
                            .type(V2SubmitParams.Relation.Step.Type.START)
                            .id("\"id\":\"Job 1\"")
                            .build()
                    )
                    .type(V2SubmitParams.Relation.Type.IN_SAME_ROUTE)
                    .id(0L)
                    .maxDuration(0L)
                    .minDuration(0L)
                    .vehicle("\"vehicle\": \"Vehicle 10\"")
                    .build()
            )
            .addShipment(
                Shipment.builder()
                    .delivery(
                        Shipment.Delivery.builder()
                            .id("\"id\":\"Shipment Delivery 1\"")
                            .locationIndex(0L)
                            .description("description")
                            .maxVisitLateness(0L)
                            .metadata(
                                JsonValue.from(
                                    "{\n  \"notes\": \"dropoff at the patio\",\n  \"contact\": \"212-456-7890\",\n  \"metaId\": 1234\n}"
                                )
                            )
                            .sequenceOrder(0L)
                            .service(0L)
                            .setup(0L)
                            .addTimeWindow(listOf(0L))
                            .build()
                    )
                    .pickup(
                        Shipment.Pickup.builder()
                            .id("\"id\": \"Shipment Pickup 1\"")
                            .locationIndex(0L)
                            .description("description")
                            .maxVisitLateness(0L)
                            .metadata(
                                JsonValue.from(
                                    "{\n  \"notes\": \"involves fragile items\",\n  \"contact\": \"212-456-7890\",\n  \"metaId\": 1234\n}"
                                )
                            )
                            .sequenceOrder(0L)
                            .service(0L)
                            .setup(0L)
                            .addTimeWindow(listOf(0L))
                            .build()
                    )
                    .addAmount(0L)
                    .followLifoOrder(true)
                    .addIncompatibleLoadType("string")
                    .jointOrder(0L)
                    .addLoadType("string")
                    .maxTimeInVehicle(0L)
                    .outsourcingCost(0L)
                    .priority(0L)
                    .revenue(0L)
                    .addSkill(0L)
                    .volume(
                        Shipment.Volume.builder()
                            .alignment(Shipment.Volume.Alignment.STRICT)
                            .depth(0.0)
                            .height(0.0)
                            .width(0.0)
                            .build()
                    )
                    .addZone(0L)
                    .build()
            )
            .addSolution(
                V2SubmitParams.Solution.builder()
                    .cost(0L)
                    .addStep(
                        V2SubmitParams.Solution.Step.builder()
                            .id("\"id\": \"Job 10\"")
                            .arrival(0L)
                            .type(V2SubmitParams.Solution.Step.Type.START)
                            .description("description")
                            .distance(0L)
                            .duration(0L)
                            .addLoad(0L)
                            .addLocation(0.0)
                            .locationIndex(0L)
                            .service(0L)
                            .setup(0L)
                            .waitingTime(0L)
                            .build()
                    )
                    .vehicle("vehicle")
                    .addDelivery(0L)
                    .description("description")
                    .distance(0L)
                    .duration(0L)
                    .geometry("\"geometry\": \"}ebGgcsxRE?CuDOYCYAG???\"")
                    .addPickup(0L)
                    .priority(0L)
                    .service(0L)
                    .setup(0L)
                    .waitingTime(0L)
                    .build()
            )
            .unassigned(
                V2SubmitParams.Unassigned.builder()
                    .addJob("string")
                    .addShipment(listOf("string"))
                    .build()
            )
            .addZone(
                V2SubmitParams.Zone.builder()
                    .id(0L)
                    .geofenceId("geofence_id")
                    .geometry(
                        V2SubmitParams.Zone.Geometry.builder()
                            .addCoordinate(listOf(0.0))
                            .description("description")
                            .type(V2SubmitParams.Zone.Geometry.Type.POLYGON)
                            .build()
                    )
                    .build()
            )
            .build()
    }

    @Test
    fun queryParams() {
        val params =
            V2SubmitParams.builder()
                .key("key=API_KEY")
                .locations(
                    V2SubmitParams.Locations.builder()
                        .addLocation("string")
                        .id(0L)
                        .addApproach(V2SubmitParams.Locations.Approach.UNRESTRICTED)
                        .build()
                )
                .addVehicle(
                    Vehicle.builder()
                        .id("id")
                        .location(Location.builder().lat(-90.0).lon(-180.0).build())
                        .attributes(
                            JsonValue.from(
                                "\"attributes\":{\n    \"driver_rating\": \"4.0\",\n    \"trip_types\": \"premium\"\n  }"
                            )
                        )
                        .priority(0L)
                        .addRemainingWaypoint(Location.builder().lat(-90.0).lon(-180.0).build())
                        .build()
                )
                .addCostMatrix(listOf(0L))
                .addDepot(
                    V2SubmitParams.Depot.builder()
                        .id("\"id\":\"depot 1\"")
                        .locationIndex(0L)
                        .description("“description”:”Los_Angeles_depot”")
                        .service(0L)
                        .addTimeWindow(listOf(0L))
                        .build()
                )
                .description("\"description\": \"Sample Optimization\"")
                .addDistanceMatrix(listOf(0L))
                .addDurationMatrix(listOf(0L))
                .existingSolutionId("existing_solution_id")
                .addJob(
                    Job.builder()
                        .id("\"id\":\"Job 1\"")
                        .locationIndex(0L)
                        .addDelivery(0L)
                        .addDepotId("string")
                        .description("description")
                        .followLifoOrder(true)
                        .addIncompatibleLoadType("string")
                        .jointOrder(0L)
                        .addLoadType("string")
                        .maxVisitLateness(0L)
                        .metadata(
                            JsonValue.from(
                                "{\n  \"contact\": \"212-456-7890\",\n  \"metaId\": 1234\n}"
                            )
                        )
                        .outsourcingCost(0L)
                        .addPickup(0L)
                        .priority(0L)
                        .revenue(0L)
                        .sequenceOrder(0L)
                        .service(0L)
                        .setup(0L)
                        .addSkill(1L)
                        .addTimeWindow(listOf(0L))
                        .volume(
                            Job.Volume.builder()
                                .alignment(Job.Volume.Alignment.STRICT)
                                .depth(0.0)
                                .height(0.0)
                                .width(0.0)
                                .build()
                        )
                        .addZone(0L)
                        .build()
                )
                .options(
                    V2SubmitParams.Options.builder()
                        .constraint(
                            V2SubmitParams.Options.Constraint.builder()
                                .maxActivityWaitingTime(0L)
                                .maxVehicleOvertime(0L)
                                .maxVisitLateness(0L)
                                .build()
                        )
                        .grouping(
                            V2SubmitParams.Options.Grouping.builder()
                                .orderGrouping(
                                    V2SubmitParams.Options.Grouping.OrderGrouping.builder()
                                        .groupingDiameter(0.0)
                                        .build()
                                )
                                .proximityFactor(0.0)
                                .routeGrouping(
                                    V2SubmitParams.Options.Grouping.RouteGrouping.builder()
                                        .penaltyFactor(0.0)
                                        .zoneDiameter(0.0)
                                        .zoneSource(
                                            V2SubmitParams.Options.Grouping.RouteGrouping.ZoneSource
                                                .SYSTEM_GENERATED
                                        )
                                        .build()
                                )
                                .build()
                        )
                        .objective(
                            V2SubmitParams.Options.Objective.builder()
                                .allowEarlyArrival(true)
                                .custom(
                                    V2SubmitParams.Options.Objective.Custom.builder()
                                        .type(V2SubmitParams.Options.Objective.Custom.Type.MIN)
                                        .value(
                                            V2SubmitParams.Options.Objective.Custom.ObjectiveValue
                                                .VEHICLES
                                        )
                                        .build()
                                )
                                .minimiseNumDepots(true)
                                .solverMode(V2SubmitParams.Options.Objective.SolverMode.FLEXIBLE)
                                .solvingTimeLimit(0L)
                                .travelCost(V2SubmitParams.Options.Objective.TravelCost.DURATION)
                                .build()
                        )
                        .routing(
                            V2SubmitParams.Options.Routing.builder()
                                .addAllow(V2SubmitParams.Options.Routing.Allow.TAXI)
                                .addAvoid(V2SubmitParams.Options.Routing.Avoid.TOLL)
                                .context(V2SubmitParams.Options.Routing.Context.AVGSPEED)
                                .crossBorder(true)
                                .disableCache(true)
                                .addHazmatType(V2SubmitParams.Options.Routing.HazmatType.GENERAL)
                                .mode(V2SubmitParams.Options.Routing.Mode.CAR)
                                .profiles(
                                    JsonValue.from(
                                        "\"profiles\":{\n    \"mini-van\":{\n        \"mode\": \"car\",\n        \"avoid\":[\"highway, toll\"]\n        },\n    \"trailer\":{\n        \"mode\": \"truck\",\n        \"truck_weight\":12000,\n        \"truck_size\":\"200, 210, 600\",\n        \"hazmat_type\": [\"general\", \"harmful_to_water\"]\n        }\n    }\n"
                                    )
                                )
                                .trafficTimestamp(0L)
                                .truckAxleLoad(0.0)
                                .truckSize("\"truck_size\":\"200,210,600\"")
                                .truckWeight(0L)
                                .build()
                        )
                        .build()
                )
                .addRelation(
                    V2SubmitParams.Relation.builder()
                        .addStep(
                            V2SubmitParams.Relation.Step.builder()
                                .type(V2SubmitParams.Relation.Step.Type.START)
                                .id("\"id\":\"Job 1\"")
                                .build()
                        )
                        .type(V2SubmitParams.Relation.Type.IN_SAME_ROUTE)
                        .id(0L)
                        .maxDuration(0L)
                        .minDuration(0L)
                        .vehicle("\"vehicle\": \"Vehicle 10\"")
                        .build()
                )
                .addShipment(
                    Shipment.builder()
                        .delivery(
                            Shipment.Delivery.builder()
                                .id("\"id\":\"Shipment Delivery 1\"")
                                .locationIndex(0L)
                                .description("description")
                                .maxVisitLateness(0L)
                                .metadata(
                                    JsonValue.from(
                                        "{\n  \"notes\": \"dropoff at the patio\",\n  \"contact\": \"212-456-7890\",\n  \"metaId\": 1234\n}"
                                    )
                                )
                                .sequenceOrder(0L)
                                .service(0L)
                                .setup(0L)
                                .addTimeWindow(listOf(0L))
                                .build()
                        )
                        .pickup(
                            Shipment.Pickup.builder()
                                .id("\"id\": \"Shipment Pickup 1\"")
                                .locationIndex(0L)
                                .description("description")
                                .maxVisitLateness(0L)
                                .metadata(
                                    JsonValue.from(
                                        "{\n  \"notes\": \"involves fragile items\",\n  \"contact\": \"212-456-7890\",\n  \"metaId\": 1234\n}"
                                    )
                                )
                                .sequenceOrder(0L)
                                .service(0L)
                                .setup(0L)
                                .addTimeWindow(listOf(0L))
                                .build()
                        )
                        .addAmount(0L)
                        .followLifoOrder(true)
                        .addIncompatibleLoadType("string")
                        .jointOrder(0L)
                        .addLoadType("string")
                        .maxTimeInVehicle(0L)
                        .outsourcingCost(0L)
                        .priority(0L)
                        .revenue(0L)
                        .addSkill(0L)
                        .volume(
                            Shipment.Volume.builder()
                                .alignment(Shipment.Volume.Alignment.STRICT)
                                .depth(0.0)
                                .height(0.0)
                                .width(0.0)
                                .build()
                        )
                        .addZone(0L)
                        .build()
                )
                .addSolution(
                    V2SubmitParams.Solution.builder()
                        .cost(0L)
                        .addStep(
                            V2SubmitParams.Solution.Step.builder()
                                .id("\"id\": \"Job 10\"")
                                .arrival(0L)
                                .type(V2SubmitParams.Solution.Step.Type.START)
                                .description("description")
                                .distance(0L)
                                .duration(0L)
                                .addLoad(0L)
                                .addLocation(0.0)
                                .locationIndex(0L)
                                .service(0L)
                                .setup(0L)
                                .waitingTime(0L)
                                .build()
                        )
                        .vehicle("vehicle")
                        .addDelivery(0L)
                        .description("description")
                        .distance(0L)
                        .duration(0L)
                        .geometry("\"geometry\": \"}ebGgcsxRE?CuDOYCYAG???\"")
                        .addPickup(0L)
                        .priority(0L)
                        .service(0L)
                        .setup(0L)
                        .waitingTime(0L)
                        .build()
                )
                .unassigned(
                    V2SubmitParams.Unassigned.builder()
                        .addJob("string")
                        .addShipment(listOf("string"))
                        .build()
                )
                .addZone(
                    V2SubmitParams.Zone.builder()
                        .id(0L)
                        .geofenceId("geofence_id")
                        .geometry(
                            V2SubmitParams.Zone.Geometry.builder()
                                .addCoordinate(listOf(0.0))
                                .description("description")
                                .type(V2SubmitParams.Zone.Geometry.Type.POLYGON)
                                .build()
                        )
                        .build()
                )
                .build()

        val queryParams = params._queryParams()

        assertThat(queryParams).isEqualTo(QueryParams.builder().put("key", "key=API_KEY").build())
    }

    @Test
    fun queryParamsWithoutOptionalFields() {
        val params =
            V2SubmitParams.builder()
                .key("key=API_KEY")
                .locations(V2SubmitParams.Locations.builder().addLocation("string").build())
                .addVehicle(
                    Vehicle.builder()
                        .id("id")
                        .location(Location.builder().lat(-90.0).lon(-180.0).build())
                        .build()
                )
                .build()

        val queryParams = params._queryParams()

        assertThat(queryParams).isEqualTo(QueryParams.builder().put("key", "key=API_KEY").build())
    }

    @Test
    fun body() {
        val params =
            V2SubmitParams.builder()
                .key("key=API_KEY")
                .locations(
                    V2SubmitParams.Locations.builder()
                        .addLocation("string")
                        .id(0L)
                        .addApproach(V2SubmitParams.Locations.Approach.UNRESTRICTED)
                        .build()
                )
                .addVehicle(
                    Vehicle.builder()
                        .id("id")
                        .location(Location.builder().lat(-90.0).lon(-180.0).build())
                        .attributes(
                            JsonValue.from(
                                "\"attributes\":{\n    \"driver_rating\": \"4.0\",\n    \"trip_types\": \"premium\"\n  }"
                            )
                        )
                        .priority(0L)
                        .addRemainingWaypoint(Location.builder().lat(-90.0).lon(-180.0).build())
                        .build()
                )
                .addCostMatrix(listOf(0L))
                .addDepot(
                    V2SubmitParams.Depot.builder()
                        .id("\"id\":\"depot 1\"")
                        .locationIndex(0L)
                        .description("“description”:”Los_Angeles_depot”")
                        .service(0L)
                        .addTimeWindow(listOf(0L))
                        .build()
                )
                .description("\"description\": \"Sample Optimization\"")
                .addDistanceMatrix(listOf(0L))
                .addDurationMatrix(listOf(0L))
                .existingSolutionId("existing_solution_id")
                .addJob(
                    Job.builder()
                        .id("\"id\":\"Job 1\"")
                        .locationIndex(0L)
                        .addDelivery(0L)
                        .addDepotId("string")
                        .description("description")
                        .followLifoOrder(true)
                        .addIncompatibleLoadType("string")
                        .jointOrder(0L)
                        .addLoadType("string")
                        .maxVisitLateness(0L)
                        .metadata(
                            JsonValue.from(
                                "{\n  \"contact\": \"212-456-7890\",\n  \"metaId\": 1234\n}"
                            )
                        )
                        .outsourcingCost(0L)
                        .addPickup(0L)
                        .priority(0L)
                        .revenue(0L)
                        .sequenceOrder(0L)
                        .service(0L)
                        .setup(0L)
                        .addSkill(1L)
                        .addTimeWindow(listOf(0L))
                        .volume(
                            Job.Volume.builder()
                                .alignment(Job.Volume.Alignment.STRICT)
                                .depth(0.0)
                                .height(0.0)
                                .width(0.0)
                                .build()
                        )
                        .addZone(0L)
                        .build()
                )
                .options(
                    V2SubmitParams.Options.builder()
                        .constraint(
                            V2SubmitParams.Options.Constraint.builder()
                                .maxActivityWaitingTime(0L)
                                .maxVehicleOvertime(0L)
                                .maxVisitLateness(0L)
                                .build()
                        )
                        .grouping(
                            V2SubmitParams.Options.Grouping.builder()
                                .orderGrouping(
                                    V2SubmitParams.Options.Grouping.OrderGrouping.builder()
                                        .groupingDiameter(0.0)
                                        .build()
                                )
                                .proximityFactor(0.0)
                                .routeGrouping(
                                    V2SubmitParams.Options.Grouping.RouteGrouping.builder()
                                        .penaltyFactor(0.0)
                                        .zoneDiameter(0.0)
                                        .zoneSource(
                                            V2SubmitParams.Options.Grouping.RouteGrouping.ZoneSource
                                                .SYSTEM_GENERATED
                                        )
                                        .build()
                                )
                                .build()
                        )
                        .objective(
                            V2SubmitParams.Options.Objective.builder()
                                .allowEarlyArrival(true)
                                .custom(
                                    V2SubmitParams.Options.Objective.Custom.builder()
                                        .type(V2SubmitParams.Options.Objective.Custom.Type.MIN)
                                        .value(
                                            V2SubmitParams.Options.Objective.Custom.ObjectiveValue
                                                .VEHICLES
                                        )
                                        .build()
                                )
                                .minimiseNumDepots(true)
                                .solverMode(V2SubmitParams.Options.Objective.SolverMode.FLEXIBLE)
                                .solvingTimeLimit(0L)
                                .travelCost(V2SubmitParams.Options.Objective.TravelCost.DURATION)
                                .build()
                        )
                        .routing(
                            V2SubmitParams.Options.Routing.builder()
                                .addAllow(V2SubmitParams.Options.Routing.Allow.TAXI)
                                .addAvoid(V2SubmitParams.Options.Routing.Avoid.TOLL)
                                .context(V2SubmitParams.Options.Routing.Context.AVGSPEED)
                                .crossBorder(true)
                                .disableCache(true)
                                .addHazmatType(V2SubmitParams.Options.Routing.HazmatType.GENERAL)
                                .mode(V2SubmitParams.Options.Routing.Mode.CAR)
                                .profiles(
                                    JsonValue.from(
                                        "\"profiles\":{\n    \"mini-van\":{\n        \"mode\": \"car\",\n        \"avoid\":[\"highway, toll\"]\n        },\n    \"trailer\":{\n        \"mode\": \"truck\",\n        \"truck_weight\":12000,\n        \"truck_size\":\"200, 210, 600\",\n        \"hazmat_type\": [\"general\", \"harmful_to_water\"]\n        }\n    }\n"
                                    )
                                )
                                .trafficTimestamp(0L)
                                .truckAxleLoad(0.0)
                                .truckSize("\"truck_size\":\"200,210,600\"")
                                .truckWeight(0L)
                                .build()
                        )
                        .build()
                )
                .addRelation(
                    V2SubmitParams.Relation.builder()
                        .addStep(
                            V2SubmitParams.Relation.Step.builder()
                                .type(V2SubmitParams.Relation.Step.Type.START)
                                .id("\"id\":\"Job 1\"")
                                .build()
                        )
                        .type(V2SubmitParams.Relation.Type.IN_SAME_ROUTE)
                        .id(0L)
                        .maxDuration(0L)
                        .minDuration(0L)
                        .vehicle("\"vehicle\": \"Vehicle 10\"")
                        .build()
                )
                .addShipment(
                    Shipment.builder()
                        .delivery(
                            Shipment.Delivery.builder()
                                .id("\"id\":\"Shipment Delivery 1\"")
                                .locationIndex(0L)
                                .description("description")
                                .maxVisitLateness(0L)
                                .metadata(
                                    JsonValue.from(
                                        "{\n  \"notes\": \"dropoff at the patio\",\n  \"contact\": \"212-456-7890\",\n  \"metaId\": 1234\n}"
                                    )
                                )
                                .sequenceOrder(0L)
                                .service(0L)
                                .setup(0L)
                                .addTimeWindow(listOf(0L))
                                .build()
                        )
                        .pickup(
                            Shipment.Pickup.builder()
                                .id("\"id\": \"Shipment Pickup 1\"")
                                .locationIndex(0L)
                                .description("description")
                                .maxVisitLateness(0L)
                                .metadata(
                                    JsonValue.from(
                                        "{\n  \"notes\": \"involves fragile items\",\n  \"contact\": \"212-456-7890\",\n  \"metaId\": 1234\n}"
                                    )
                                )
                                .sequenceOrder(0L)
                                .service(0L)
                                .setup(0L)
                                .addTimeWindow(listOf(0L))
                                .build()
                        )
                        .addAmount(0L)
                        .followLifoOrder(true)
                        .addIncompatibleLoadType("string")
                        .jointOrder(0L)
                        .addLoadType("string")
                        .maxTimeInVehicle(0L)
                        .outsourcingCost(0L)
                        .priority(0L)
                        .revenue(0L)
                        .addSkill(0L)
                        .volume(
                            Shipment.Volume.builder()
                                .alignment(Shipment.Volume.Alignment.STRICT)
                                .depth(0.0)
                                .height(0.0)
                                .width(0.0)
                                .build()
                        )
                        .addZone(0L)
                        .build()
                )
                .addSolution(
                    V2SubmitParams.Solution.builder()
                        .cost(0L)
                        .addStep(
                            V2SubmitParams.Solution.Step.builder()
                                .id("\"id\": \"Job 10\"")
                                .arrival(0L)
                                .type(V2SubmitParams.Solution.Step.Type.START)
                                .description("description")
                                .distance(0L)
                                .duration(0L)
                                .addLoad(0L)
                                .addLocation(0.0)
                                .locationIndex(0L)
                                .service(0L)
                                .setup(0L)
                                .waitingTime(0L)
                                .build()
                        )
                        .vehicle("vehicle")
                        .addDelivery(0L)
                        .description("description")
                        .distance(0L)
                        .duration(0L)
                        .geometry("\"geometry\": \"}ebGgcsxRE?CuDOYCYAG???\"")
                        .addPickup(0L)
                        .priority(0L)
                        .service(0L)
                        .setup(0L)
                        .waitingTime(0L)
                        .build()
                )
                .unassigned(
                    V2SubmitParams.Unassigned.builder()
                        .addJob("string")
                        .addShipment(listOf("string"))
                        .build()
                )
                .addZone(
                    V2SubmitParams.Zone.builder()
                        .id(0L)
                        .geofenceId("geofence_id")
                        .geometry(
                            V2SubmitParams.Zone.Geometry.builder()
                                .addCoordinate(listOf(0.0))
                                .description("description")
                                .type(V2SubmitParams.Zone.Geometry.Type.POLYGON)
                                .build()
                        )
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body.locations())
            .isEqualTo(
                V2SubmitParams.Locations.builder()
                    .addLocation("string")
                    .id(0L)
                    .addApproach(V2SubmitParams.Locations.Approach.UNRESTRICTED)
                    .build()
            )
        assertThat(body.vehicles())
            .containsExactly(
                Vehicle.builder()
                    .id("id")
                    .location(Location.builder().lat(-90.0).lon(-180.0).build())
                    .attributes(
                        JsonValue.from(
                            "\"attributes\":{\n    \"driver_rating\": \"4.0\",\n    \"trip_types\": \"premium\"\n  }"
                        )
                    )
                    .priority(0L)
                    .addRemainingWaypoint(Location.builder().lat(-90.0).lon(-180.0).build())
                    .build()
            )
        assertThat(body.costMatrix().getOrNull()).containsExactly(listOf(0L))
        assertThat(body.depots().getOrNull())
            .containsExactly(
                V2SubmitParams.Depot.builder()
                    .id("\"id\":\"depot 1\"")
                    .locationIndex(0L)
                    .description("“description”:”Los_Angeles_depot”")
                    .service(0L)
                    .addTimeWindow(listOf(0L))
                    .build()
            )
        assertThat(body.description()).contains("\"description\": \"Sample Optimization\"")
        assertThat(body.distanceMatrix().getOrNull()).containsExactly(listOf(0L))
        assertThat(body.durationMatrix().getOrNull()).containsExactly(listOf(0L))
        assertThat(body.existingSolutionId()).contains("existing_solution_id")
        assertThat(body.jobs().getOrNull())
            .containsExactly(
                Job.builder()
                    .id("\"id\":\"Job 1\"")
                    .locationIndex(0L)
                    .addDelivery(0L)
                    .addDepotId("string")
                    .description("description")
                    .followLifoOrder(true)
                    .addIncompatibleLoadType("string")
                    .jointOrder(0L)
                    .addLoadType("string")
                    .maxVisitLateness(0L)
                    .metadata(
                        JsonValue.from("{\n  \"contact\": \"212-456-7890\",\n  \"metaId\": 1234\n}")
                    )
                    .outsourcingCost(0L)
                    .addPickup(0L)
                    .priority(0L)
                    .revenue(0L)
                    .sequenceOrder(0L)
                    .service(0L)
                    .setup(0L)
                    .addSkill(1L)
                    .addTimeWindow(listOf(0L))
                    .volume(
                        Job.Volume.builder()
                            .alignment(Job.Volume.Alignment.STRICT)
                            .depth(0.0)
                            .height(0.0)
                            .width(0.0)
                            .build()
                    )
                    .addZone(0L)
                    .build()
            )
        assertThat(body.options())
            .contains(
                V2SubmitParams.Options.builder()
                    .constraint(
                        V2SubmitParams.Options.Constraint.builder()
                            .maxActivityWaitingTime(0L)
                            .maxVehicleOvertime(0L)
                            .maxVisitLateness(0L)
                            .build()
                    )
                    .grouping(
                        V2SubmitParams.Options.Grouping.builder()
                            .orderGrouping(
                                V2SubmitParams.Options.Grouping.OrderGrouping.builder()
                                    .groupingDiameter(0.0)
                                    .build()
                            )
                            .proximityFactor(0.0)
                            .routeGrouping(
                                V2SubmitParams.Options.Grouping.RouteGrouping.builder()
                                    .penaltyFactor(0.0)
                                    .zoneDiameter(0.0)
                                    .zoneSource(
                                        V2SubmitParams.Options.Grouping.RouteGrouping.ZoneSource
                                            .SYSTEM_GENERATED
                                    )
                                    .build()
                            )
                            .build()
                    )
                    .objective(
                        V2SubmitParams.Options.Objective.builder()
                            .allowEarlyArrival(true)
                            .custom(
                                V2SubmitParams.Options.Objective.Custom.builder()
                                    .type(V2SubmitParams.Options.Objective.Custom.Type.MIN)
                                    .value(
                                        V2SubmitParams.Options.Objective.Custom.ObjectiveValue
                                            .VEHICLES
                                    )
                                    .build()
                            )
                            .minimiseNumDepots(true)
                            .solverMode(V2SubmitParams.Options.Objective.SolverMode.FLEXIBLE)
                            .solvingTimeLimit(0L)
                            .travelCost(V2SubmitParams.Options.Objective.TravelCost.DURATION)
                            .build()
                    )
                    .routing(
                        V2SubmitParams.Options.Routing.builder()
                            .addAllow(V2SubmitParams.Options.Routing.Allow.TAXI)
                            .addAvoid(V2SubmitParams.Options.Routing.Avoid.TOLL)
                            .context(V2SubmitParams.Options.Routing.Context.AVGSPEED)
                            .crossBorder(true)
                            .disableCache(true)
                            .addHazmatType(V2SubmitParams.Options.Routing.HazmatType.GENERAL)
                            .mode(V2SubmitParams.Options.Routing.Mode.CAR)
                            .profiles(
                                JsonValue.from(
                                    "\"profiles\":{\n    \"mini-van\":{\n        \"mode\": \"car\",\n        \"avoid\":[\"highway, toll\"]\n        },\n    \"trailer\":{\n        \"mode\": \"truck\",\n        \"truck_weight\":12000,\n        \"truck_size\":\"200, 210, 600\",\n        \"hazmat_type\": [\"general\", \"harmful_to_water\"]\n        }\n    }\n"
                                )
                            )
                            .trafficTimestamp(0L)
                            .truckAxleLoad(0.0)
                            .truckSize("\"truck_size\":\"200,210,600\"")
                            .truckWeight(0L)
                            .build()
                    )
                    .build()
            )
        assertThat(body.relations().getOrNull())
            .containsExactly(
                V2SubmitParams.Relation.builder()
                    .addStep(
                        V2SubmitParams.Relation.Step.builder()
                            .type(V2SubmitParams.Relation.Step.Type.START)
                            .id("\"id\":\"Job 1\"")
                            .build()
                    )
                    .type(V2SubmitParams.Relation.Type.IN_SAME_ROUTE)
                    .id(0L)
                    .maxDuration(0L)
                    .minDuration(0L)
                    .vehicle("\"vehicle\": \"Vehicle 10\"")
                    .build()
            )
        assertThat(body.shipments().getOrNull())
            .containsExactly(
                Shipment.builder()
                    .delivery(
                        Shipment.Delivery.builder()
                            .id("\"id\":\"Shipment Delivery 1\"")
                            .locationIndex(0L)
                            .description("description")
                            .maxVisitLateness(0L)
                            .metadata(
                                JsonValue.from(
                                    "{\n  \"notes\": \"dropoff at the patio\",\n  \"contact\": \"212-456-7890\",\n  \"metaId\": 1234\n}"
                                )
                            )
                            .sequenceOrder(0L)
                            .service(0L)
                            .setup(0L)
                            .addTimeWindow(listOf(0L))
                            .build()
                    )
                    .pickup(
                        Shipment.Pickup.builder()
                            .id("\"id\": \"Shipment Pickup 1\"")
                            .locationIndex(0L)
                            .description("description")
                            .maxVisitLateness(0L)
                            .metadata(
                                JsonValue.from(
                                    "{\n  \"notes\": \"involves fragile items\",\n  \"contact\": \"212-456-7890\",\n  \"metaId\": 1234\n}"
                                )
                            )
                            .sequenceOrder(0L)
                            .service(0L)
                            .setup(0L)
                            .addTimeWindow(listOf(0L))
                            .build()
                    )
                    .addAmount(0L)
                    .followLifoOrder(true)
                    .addIncompatibleLoadType("string")
                    .jointOrder(0L)
                    .addLoadType("string")
                    .maxTimeInVehicle(0L)
                    .outsourcingCost(0L)
                    .priority(0L)
                    .revenue(0L)
                    .addSkill(0L)
                    .volume(
                        Shipment.Volume.builder()
                            .alignment(Shipment.Volume.Alignment.STRICT)
                            .depth(0.0)
                            .height(0.0)
                            .width(0.0)
                            .build()
                    )
                    .addZone(0L)
                    .build()
            )
        assertThat(body.solution().getOrNull())
            .containsExactly(
                V2SubmitParams.Solution.builder()
                    .cost(0L)
                    .addStep(
                        V2SubmitParams.Solution.Step.builder()
                            .id("\"id\": \"Job 10\"")
                            .arrival(0L)
                            .type(V2SubmitParams.Solution.Step.Type.START)
                            .description("description")
                            .distance(0L)
                            .duration(0L)
                            .addLoad(0L)
                            .addLocation(0.0)
                            .locationIndex(0L)
                            .service(0L)
                            .setup(0L)
                            .waitingTime(0L)
                            .build()
                    )
                    .vehicle("vehicle")
                    .addDelivery(0L)
                    .description("description")
                    .distance(0L)
                    .duration(0L)
                    .geometry("\"geometry\": \"}ebGgcsxRE?CuDOYCYAG???\"")
                    .addPickup(0L)
                    .priority(0L)
                    .service(0L)
                    .setup(0L)
                    .waitingTime(0L)
                    .build()
            )
        assertThat(body.unassigned())
            .contains(
                V2SubmitParams.Unassigned.builder()
                    .addJob("string")
                    .addShipment(listOf("string"))
                    .build()
            )
        assertThat(body.zones().getOrNull())
            .containsExactly(
                V2SubmitParams.Zone.builder()
                    .id(0L)
                    .geofenceId("geofence_id")
                    .geometry(
                        V2SubmitParams.Zone.Geometry.builder()
                            .addCoordinate(listOf(0.0))
                            .description("description")
                            .type(V2SubmitParams.Zone.Geometry.Type.POLYGON)
                            .build()
                    )
                    .build()
            )
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            V2SubmitParams.builder()
                .key("key=API_KEY")
                .locations(V2SubmitParams.Locations.builder().addLocation("string").build())
                .addVehicle(
                    Vehicle.builder()
                        .id("id")
                        .location(Location.builder().lat(-90.0).lon(-180.0).build())
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body.locations())
            .isEqualTo(V2SubmitParams.Locations.builder().addLocation("string").build())
        assertThat(body.vehicles())
            .containsExactly(
                Vehicle.builder()
                    .id("id")
                    .location(Location.builder().lat(-90.0).lon(-180.0).build())
                    .build()
            )
    }
}
